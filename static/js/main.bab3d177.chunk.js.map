{"version":3,"sources":["components/Home/Home.tsx","components/Header/Logo.tsx","components/Work/Work.tsx","components/Contact/Contact.tsx","components/Header/NavButton.tsx","components/Header/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","Logo","className","Work","Contact","href","icon","faTwitter","size","color","NavButton","props","content","Header","to","faHome","faFileWord","faPrayingHands","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVAUeA,EARF,WACT,OACI,6BACI,8CCMGC,G,MARF,WACT,OACI,yBAAKC,UAAU,QACX,0CCIGC,EARF,WACT,OACI,6BACI,0C,wBCiBGC,EAjBC,WACZ,OACE,yBAAKF,UAAU,mBACX,uCACA,yBAAKA,UAAU,aACX,wIACA,uBAAGG,KAAK,uCACJ,kBAAC,IAAD,CAAiBC,KAAMC,IAAWC,KAAM,KAAMC,MAAM,cAG5D,yBAAKP,UAAU,aACX,iECICQ,G,MAV6B,SAAAC,GACxC,OACI,yBAAKT,UAAU,aACX,2BACI,kBAAC,IAAD,CAAiBI,KAAMK,EAAML,OADjC,IAC2CK,EAAMC,Y,QC+B9CC,EAnCA,WACX,OACI,kBAAC,IAAD,KACI,gCACI,yBAAKX,UAAU,eACX,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,gBAEX,kBAAC,IAAD,CAAMY,GAAG,KACL,kBAAC,EAAD,CAAWF,QAAQ,OAAON,KAAMS,OAGpC,kBAAC,IAAD,CAAMD,GAAG,SACL,kBAAC,EAAD,CAAWF,QAAQ,OAAON,KAAMU,OAGpC,kBAAC,IAAD,CAAMF,GAAG,YACL,kBAAC,EAAD,CAAWF,QAAQ,UAAUN,KAAMW,SAM/C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,QAAQE,UAAWjB,IAC/B,kBAAC,IAAD,CAAOe,KAAK,WAAWE,UAAWhB,OCvBnCiB,EAVH,WACV,OACE,yBAAKnB,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,SCGQoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bab3d177.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => {\n    return (\n        <div>\n            <p>Home contents</p>\n        </div>\n    );\n}\n\nexport default Home;","import React from \"react\";\nimport \"./Logo.css\";\n\nconst Logo = () => {\n    return(\n        <div className=\"Logo\">\n            <p>k-nagase</p>\n        </div>\n    );\n};\n\nexport default Logo;","import React from \"react\";\n\nconst Work = () => {\n    return (\n        <div>\n            <p>Work page</p>\n        </div>\n    );\n};\n\nexport default Work;","import React from \"react\";\nimport \"./Contact.css\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTwitter} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Contact = () => {\n    return (\n      <div className=\"contact-content\">\n          <h1>Contact</h1>\n          <div className=\"sns-icons\">\n              <p>TwitterはDMかリプライからお願いいたします</p>\n              <a href=\"https://twitter.com/1rUJCQrbBYqlv1m\">\n                  <FontAwesomeIcon icon={faTwitter} size={\"4x\"} color=\"#00ACEE\" />\n              </a>\n          </div>\n          <div className=\"mail-addr\">\n              <p>e-mail : k.nagase.biz@gmail.com</p>\n          </div>\n      </div>\n    );\n};\n\nexport default Contact;","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport \"./NavButton.css\";\nimport {IconDefinition} from \"@fortawesome/free-solid-svg-icons\";\n\ninterface NavButtonProps {\n    content: string;\n    icon: IconDefinition;\n}\n\nconst NavButton: React.FC<NavButtonProps> = props => {\n    return (\n        <div className=\"NavButton\">\n            <p>\n                <FontAwesomeIcon icon={props.icon} /> {props.content}\n            </p>\n        </div>\n    );\n};\n\nexport default NavButton;","import React from \"react\";\nimport \"./Header.css\";\nimport {Link, HashRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Home from \"../Home/Home\";\nimport Logo from \"./Logo\";\nimport Work from \"../Work/Work\";\nimport Contact from \"../Contact/Contact\";\nimport NavButton from \"./NavButton\";\nimport {faFileWord, faHome, faPrayingHands} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Header = () => {\n    return (\n        <Router>\n            <header>\n                <div className=\"header-left\">\n                    <Logo />\n                </div>\n\n                <div className=\"header-right\">\n\n                    <Link to=\"/\">\n                        <NavButton content=\"Home\" icon={faHome} />\n                    </Link>\n\n                    <Link to=\"/work\">\n                        <NavButton content=\"Work\" icon={faFileWord} />\n                    </Link>\n\n                    <Link to=\"/contact\">\n                        <NavButton content=\"Contact\" icon={faPrayingHands} />\n                    </Link>\n\n                </div>\n            </header>\n\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/work\" component={Work} />\n                <Route path=\"/contact\" component={Contact} />\n            </Switch>\n        </Router>\n\n    )\n};\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Router>\n            <Header />\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}